"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var react_1 = require("react");
var AmplifyUI_1 = require("../AmplifyUI");
var AmplifyTheme_1 = require("../AmplifyTheme");
var core_1 = require("@aws-amplify/core");
var interactions_1 = require("@aws-amplify/interactions");
var styles = {
    itemMe: {
        padding: 10,
        fontSize: 12,
        color: 'gray',
        marginTop: 4,
        textAlign: 'right'
    },
    itemBot: {
        fontSize: 12,
        textAlign: 'left'
    },
    list: {
        height: '300px',
        overflow: 'auto',
    },
    textInput: Object.assign({}, AmplifyTheme_1.Input, {
        display: 'inline-block',
        width: 'calc(100% - 90px - 15px)',
    }),
    button: Object.assign({}, AmplifyTheme_1.Button, {
        width: '90px',
        float: 'right',
    })
};
var ChatBot = /** @class */ (function (_super) {
    __extends(ChatBot, _super);
    function ChatBot(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            dialog: [{
                    message: _this.props.welcomeMessage || 'Welcome to Lex',
                    from: 'system'
                }],
            inputText: ''
        };
        _this.changeInputText = _this.changeInputText.bind(_this);
        _this.listItems = _this.listItems.bind(_this);
        _this.submit = _this.submit.bind(_this);
        _this.listItemsRef = React.createRef();
        return _this;
    }
    ChatBot.prototype.listItems = function () {
        return this.state.dialog.map(function (m, i) {
            if (m.from === 'me') {
                return React.createElement("div", { key: i, style: styles.itemMe }, m.message);
            }
            else if (m.from === 'system') {
                return React.createElement("div", { key: i, style: styles.itemBot }, m.message);
            }
            else {
                return React.createElement("div", { key: i, style: styles.itemBot }, m.message);
            }
        });
    };
    ChatBot.prototype.submit = function (e) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        e.preventDefault();
                        if (!this.state.inputText) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, new Promise(function (resolve) { return _this.setState({
                                dialog: _this.state.dialog.concat([
                                    { message: _this.state.inputText, from: 'me' },
                                ])
                            }, resolve); })];
                    case 1:
                        _a.sent();
                        if (!interactions_1.default || typeof interactions_1.default.send !== 'function') {
                            throw new Error('No Interactions module found, please ensure @aws-amplify/interactions is imported');
                        }
                        return [4 /*yield*/, interactions_1.default.send(this.props.botName, this.state.inputText)];
                    case 2:
                        response = _a.sent();
                        return [4 /*yield*/, this.setState({
                                dialog: this.state.dialog.concat([response && { from: 'bot', message: response.message }]),
                                inputText: ''
                            })];
                    case 3:
                        _a.sent();
                        this.listItemsRef.current.scrollTop = this.listItemsRef.current.scrollHeight;
                        return [2 /*return*/];
                }
            });
        });
    };
    ChatBot.prototype.changeInputText = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.setState({ inputText: event.target.value })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ChatBot.prototype.getOnComplete = function (fn) {
        var _this = this;
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var clearOnComplete = _this.props.clearOnComplete;
            var message = fn.apply(void 0, args);
            _this.setState({
                dialog: (!clearOnComplete && _this.state.dialog).concat([
                    message && { from: 'bot', message: message }
                ]).filter(Boolean),
            }, function () {
                _this.listItemsRef.current.scrollTop = _this.listItemsRef.current.scrollHeight;
            });
        };
    };
    ChatBot.prototype.componentDidMount = function () {
        var _a = this.props, onComplete = _a.onComplete, botName = _a.botName;
        if (onComplete && botName) {
            if (!interactions_1.default || typeof interactions_1.default.onComplete !== 'function') {
                throw new Error('No Interactions module found, please ensure @aws-amplify/interactions is imported');
            }
            interactions_1.default.onComplete(botName, this.getOnComplete(onComplete, this));
        }
    };
    ChatBot.prototype.componentDidUpdate = function (prevProps) {
        var _a = this.props, onComplete = _a.onComplete, botName = _a.botName;
        if (botName && this.props.onComplete !== prevProps.onComplete) {
            if (!interactions_1.default || typeof interactions_1.default.onComplete !== 'function') {
                throw new Error('No Interactions module found, please ensure @aws-amplify/interactions is imported');
            }
            interactions_1.default.onComplete(botName, this.getOnComplete(onComplete, this));
        }
    };
    ChatBot.prototype.render = function () {
        var _a = this.props, title = _a.title, theme = _a.theme, onComplete = _a.onComplete;
        return (React.createElement(AmplifyUI_1.FormSection, { theme: theme },
            title && React.createElement(AmplifyUI_1.SectionHeader, { theme: theme }, core_1.I18n.get(title)),
            React.createElement(AmplifyUI_1.SectionBody, { theme: theme },
                React.createElement("div", { ref: this.listItemsRef, style: styles.list }, this.listItems())),
            React.createElement(AmplifyUI_1.SectionFooter, { theme: theme },
                React.createElement("form", { onSubmit: this.submit },
                    React.createElement("input", { style: styles.textInput, type: 'text', placeholder: core_1.I18n.get("Type your message here"), onChange: this.changeInputText, value: this.state.inputText }),
                    React.createElement("button", { type: "submit", style: styles.button }, core_1.I18n.get('Send'))))));
    };
    return ChatBot;
}(react_1.Component));
exports.ChatBot = ChatBot;
ChatBot.defaultProps = {
    title: '',
    botName: '',
    onComplete: undefined,
    clearOnComplete: false,
};
exports.default = ChatBot;
//# sourceMappingURL=ChatBot.js.map